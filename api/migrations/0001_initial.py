# Generated by Django 3.2 on 2021-04-21 14:07

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inquery', models.CharField(max_length=100)),
                ('annex_num', models.PositiveIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='AnnexRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('annex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='api.annex')),
            ],
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_num', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('swift', models.PositiveIntegerField()),
                ('banking_code', models.PositiveIntegerField()),
                ('voen', models.PositiveBigIntegerField(unique=True)),
                ('reporter_account', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Buyer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('surname', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responsible_person', models.CharField(max_length=50)),
                ('phone_num', models.CharField(max_length=50)),
                ('position', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('work_email', models.EmailField(max_length=254)),
                ('personal_email', models.EmailField(max_length=254)),
                ('web_site', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment', models.CharField(max_length=255)),
                ('delivery', models.CharField(max_length=255)),
                ('handed', models.CharField(max_length=255)),
                ('custom_condition', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SalesManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('surname', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('product_quantity', models.PositiveIntegerField(null=True)),
                ('unit_price', models.PositiveIntegerField()),
                ('total_price', models.PositiveIntegerField()),
                ('annex_revision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.annexrevision')),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('legal_address', models.CharField(max_length=255)),
                ('created_date', models.DateField()),
                ('expired_date', models.DateField()),
                ('num', models.PositiveBigIntegerField(unique=True)),
                ('director_name', models.CharField(max_length=50)),
                ('director_surname', models.CharField(max_length=50)),
                ('director_middle_name', models.CharField(max_length=50)),
                ('sales_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.salesmanager')),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Buy-sale'), (1, 'One time'), (2, 'Distributor'), (3, 'Service')], default=0, verbose_name='Type')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'In progress'), (1, 'Approved'), (2, 'Time over')], default=0, verbose_name='Contract status')),
                ('bank', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.bank')),
                ('client', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.client')),
                ('entity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.entity')),
            ],
        ),
        migrations.AddField(
            model_name='annex',
            name='buyer',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.buyer'),
        ),
        migrations.AddField(
            model_name='annex',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='annex_list', to='api.contract'),
        ),
        migrations.AddField(
            model_name='annex',
            name='current_revision',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_annex', to='api.annexrevision'),
        ),
        migrations.AddField(
            model_name='annex',
            name='plant',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.plant'),
        ),
        migrations.AddField(
            model_name='annex',
            name='sales_manager',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='api.salesmanager'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('plant_name', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
